import { encodeBase64 } from "@swan-io/lake/src/utils/base64";
import { isNotNullish, isNotNullishOrEmpty } from "@swan-io/lake/src/utils/nullish";
import deburr from "lodash/deburr";
import { match } from "ts-pattern";

const BASE64_URI_PREFIX = "data:image/svg+xml;base64,";

export const convertPngFileToBase64Uri = (file: File): Promise<string> =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = event => {
      if (typeof event.target?.result !== "string") {
        return reject("No content");
      }
      resolve(event.target.result);
    };

    reader.readAsDataURL(file);
  });

export const convertSvgFileToString = (file: File): Promise<string> =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = event => {
      if (typeof event.target?.result !== "string") {
        return reject("No content");
      }
      resolve(event.target.result);
    };

    reader.readAsText(file);
  });

export const convertStringToSvg = (content: string, fileName = ""): SVGElement => {
  // deburr file content to avoid base64 encoding errors (for example with french accent)
  const cleanedContent = deburr(content);
  const parser = new DOMParser();
  const document = parser.parseFromString(cleanedContent, "image/svg+xml");

  if (!(document.children[0] instanceof SVGElement)) {
    throw new Error(`File "${fileName}" isn't a valid svg`);
  }

  return document.children[0];
};

export const convertSvgToBase64Uri = (svg: SVGElement): string => {
  return BASE64_URI_PREFIX + encodeBase64(svg.outerHTML);
};

export const getSvgSize = (svg: SVGElement): Size => {
  // first we try to get width and height from "width" and "height" attributes
  const widthAttr = svg.getAttribute("width");
  const heightAttr = svg.getAttribute("height");

  const width = widthAttr != null ? parseInt(widthAttr) : NaN;
  const height = heightAttr != null ? parseInt(heightAttr) : NaN;

  if (!isNaN(width) || !isNaN(height)) {
    return { width, height };
  }

  // if height and width aren't provided, we get values from viewBox attribute
  const viewBox = svg.getAttribute("viewBox");
  const [, , boxWidthAttr, boxHeightAttr] = viewBox?.split(" ") ?? [];

  const boxWidth = boxWidthAttr != null ? parseInt(boxWidthAttr) : NaN;
  const boxHeight = boxHeightAttr != null ? parseInt(boxHeightAttr) : NaN;

  if (isNaN(boxWidth) || isNaN(boxHeight)) {
    throw new Error("Invalid SVG Imported: an SVG must have a viewBox attribute");
  }

  return {
    width: boxWidth,
    height: boxHeight,
  };
};

// Create image with 1024px width or 256px height to optimize threejs mipmapping
const getImageSize = (size: Size): Size => {
  const ratio = size.width / size.height;
  // if svg is wider, we set width at 1024px and adapt height
  if (ratio >= 1) {
    const width = 1024;
    const height = width / ratio;
    return { width, height };
  } else {
    // we set height at 256px and adapt width
    const height = 256;
    const width = height * ratio;
    return { width, height };
  }
};

const isSvgColored = (element: Element): boolean => {
  const fill = element.getAttribute("fill");
  const stroke = element.getAttribute("stroke");
  const style = element.getAttribute("style");

  if (element.tagName === "style") {
    return element.innerHTML.includes("fill") || element.innerHTML.includes("stroke");
  }

  if (isNotNullishOrEmpty(fill) || isNotNullishOrEmpty(stroke) || isNotNullishOrEmpty(style)) {
    return true;
  }

  return [...element.children].some(children => isSvgColored(children));
};

/**
 * This function create a matrix which can be used in <feColorMatrix> element
 * More info here: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix
 */
const getMatrixColor = (color: "white" | "black"): string => {
  const colorIntensity = color === "white" ? 1 : 0;
  const red = colorIntensity;
  const green = colorIntensity;
  const blue = colorIntensity;
  const alpha = 1;

  // prettier-ignore
  const matrix = [
    red,   red,   red,   red,   red,   // R
    green, green, green, green, green, // G
    blue,  blue,  blue,  blue,  blue,  // B
    0,     0,     0,     alpha, 0,     // A
  ]

  return matrix.join(" ");
};

// this function make the svg white to be used as material alpha map
// this function make the svg black to be used in SvgDropzone
export const getMonochromeSvg = (svg: SVGElement, color: "white" | "black"): SVGElement => {
  const hexaCode = match(color)
    .with("black", () => "#000")
    .with("white", () => "#FFF")
    .exhaustive();

  const newSvg = svg.cloneNode(true) as SVGElement;

  if (!isSvgColored(svg)) {
    newSvg.setAttribute("fill", hexaCode);
    newSvg.setAttribute("stroke", hexaCode);
    return newSvg;
  }

  const tagsToNotChange = ["mask"];

  const changeElementColor = (element: Element): void => {
    if (element.tagName === "style") {
      const css = element.innerHTML;
      const regex =
        /#[A-F0-9]{6,6}|#[A-F0-9]{3,3}|rgb\(\d{1,3},\d{1,3},\d{1,3}\)|rgba\(\d{1,3},\d{1,3},\d{1,3},\d\.?\d{0,}\)/gim;

      const cssWithColor = css.replace(regex, hexaCode);
      element.innerHTML = cssWithColor;
    }

    if (element.tagName === "feColorMatrix") {
      const matrix = getMatrixColor(color);
      element.setAttribute("type", "matrix");
      element.setAttribute("values", matrix);
    }

    const isElementToChange = !tagsToNotChange.includes(element.tagName);

    const fill = isElementToChange ? element.getAttribute("fill") : null;
    const stroke = isElementToChange ? element.getAttribute("stroke") : null;
    const stopColor = isElementToChange ? element.getAttribute("stop-color") : null;
    const style = isElementToChange ? element.getAttribute("style") : null;

    if (isNotNullishOrEmpty(fill) && fill !== "none") {
      element.setAttribute("fill", hexaCode);
    }
    if (isNotNullishOrEmpty(stroke) && stroke !== "none") {
      element.setAttribute("stroke", hexaCode);
    }
    // stop-color is used for gradients
    if (isNotNullishOrEmpty(stopColor) && stopColor !== "none") {
      element.setAttribute("stop-color", hexaCode);
    }
    if (isNotNullish(style)) {
      const styleWithColor = style
        .split(";")
        .map(rule => {
          const [property, value] = rule.split(":");
          // stop-color is used for gradients
          if (
            isNotNullish(property) &&
            ["fill", "stroke", "stop-color"].includes(property) &&
            value !== "none"
          ) {
            return `${property}:${hexaCode}`;
          }
          return rule;
        })
        .join(";");

      element.setAttribute("style", styleWithColor);
    }

    [...element.children].forEach(children => changeElementColor(children));
  };

  changeElementColor(newSvg);

  return newSvg;
};

// Size and path copied from https://github.com/swan-io/lake/blob/main/packages/lake/src/components/SwanLogo.tsx
export const createSwanLogoSvg = (): SVGElement => {
  const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  const width = 45;
  const height = 10;

  svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
  svg.setAttribute("width", width.toString());
  svg.setAttribute("height", height.toString());
  svg.setAttribute("viewBox", `0 0 ${width} ${height}`);

  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute(
    "d",
    "M41.01 0c2.2 0 3.66 1.6 3.66 3.82v5.95H42.9V3.9c0-1.28-1-2.19-2.23-2.19a2.33 2.33 0 00-2.37 2.4v5.65h-1.83V.27h1.83v.92A3.4 3.4 0 0141 0zM30.77 9.73H29.2c-2.65 0-4.53-2.27-4.53-4.86A4.81 4.81 0 0129.44 0c2.92 0 4.93 1.74 4.93 4.45v5.32h-1.71V4.45c0-1.72-1.2-2.76-3.22-2.76a3.11 3.11 0 00-3.06 3.18c0 1.72 1.2 3.17 2.82 3.17h1.57v1.7zm-14.37-7l-2.25 7.04h-2.1L9.07.27h1.96l2.11 7.16L15.45.27h1.9l2.3 7.16L21.76.27h1.96l-3 9.5h-2.1zM4.14 10C1.94 10 .54 8.82.36 6.93L.33 6.7h1.79l.02.18c.15.98.84 1.48 2.07 1.48s1.93-.54 1.93-1.38c0-.82-.5-1.1-2.15-1.42l-.43-.09C1.54 5.05.64 4.41.64 2.76.64 1.1 2.1 0 4.18 0 6.06 0 7.5 1.12 7.65 2.83l.02.23H5.9l-.02-.19c-.12-.79-.72-1.25-1.79-1.25-1.03 0-1.68.47-1.68 1.14 0 .68.47.92 1.99 1.2l.6.12c2 .4 2.93 1.1 2.93 2.83C7.93 8.76 6.4 10 4.14 10z",
  );
  path.setAttribute("fill", "#000");

  svg.appendChild(path);

  return svg;
};

export const createYourBrandSvg = (): SVGElement => {
  const svgString = `<svg width="173" height="51" viewBox="0 0 173 51" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M0.602264 4H6.88636L11.8068 13.7386H12.0114L16.9318 4H23.2159L14.7045 19.5V27.2727H9.11363V19.5L0.602264 4Z" fill="#000"/>
  <path d="M30.3303 27.6023C28.497 27.6023 26.9212 27.2273 25.6031 26.4773C24.2925 25.7197 23.2811 24.6667 22.569 23.3182C21.8644 21.9621 21.5121 20.3902 21.5121 18.6023C21.5121 16.8068 21.8644 15.2348 22.569 13.8864C23.2811 12.5303 24.2925 11.4773 25.6031 10.7273C26.9212 9.9697 28.497 9.59091 30.3303 9.59091C32.1637 9.59091 33.7356 9.9697 35.0462 10.7273C36.3644 11.4773 37.3758 12.5303 38.0803 13.8864C38.7925 15.2348 39.1485 16.8068 39.1485 18.6023C39.1485 20.3902 38.7925 21.9621 38.0803 23.3182C37.3758 24.6667 36.3644 25.7197 35.0462 26.4773C33.7356 27.2273 32.1637 27.6023 30.3303 27.6023ZM30.3644 23.4091C31.0311 23.4091 31.5955 23.2045 32.0576 22.7955C32.5197 22.3864 32.872 21.8182 33.1144 21.0909C33.3644 20.3636 33.4894 19.5227 33.4894 18.5682C33.4894 17.5985 33.3644 16.75 33.1144 16.0227C32.872 15.2955 32.5197 14.7273 32.0576 14.3182C31.5955 13.9091 31.0311 13.7045 30.3644 13.7045C29.675 13.7045 29.0917 13.9091 28.6144 14.3182C28.1447 14.7273 27.7849 15.2955 27.5349 16.0227C27.2925 16.75 27.1712 17.5985 27.1712 18.5682C27.1712 19.5227 27.2925 20.3636 27.5349 21.0909C27.7849 21.8182 28.1447 22.3864 28.6144 22.7955C29.0917 23.2045 29.675 23.4091 30.3644 23.4091Z" fill="#000"/>
  <path d="M53.8965 19.7386V9.81818H59.4419V27.2727H54.1465V24.0227H53.9646C53.5783 25.0909 52.9192 25.9394 51.9874 26.5682C51.0631 27.1894 49.9457 27.5 48.6351 27.5C47.4457 27.5 46.4003 27.2273 45.4987 26.6818C44.5972 26.1364 43.8965 25.375 43.3965 24.3977C42.8965 23.4129 42.6427 22.2614 42.6351 20.9432V9.81818H48.1919V19.8523C48.1995 20.7992 48.4495 21.5455 48.9419 22.0909C49.4343 22.6364 50.1048 22.9091 50.9533 22.9091C51.5063 22.9091 52.0025 22.7879 52.4419 22.5455C52.8889 22.2955 53.2412 21.9356 53.4987 21.4659C53.7639 20.9886 53.8965 20.4129 53.8965 19.7386Z" fill="#000"/>
  <path d="M63.6189 27.2727V9.81818H69.0166V13H69.1984C69.5166 11.8485 70.0355 10.9924 70.7552 10.4318C71.4749 9.86364 72.312 9.57955 73.2666 9.57955C73.5242 9.57955 73.7893 9.59849 74.062 9.63636C74.3348 9.66667 74.5886 9.71591 74.8234 9.78409V14.6136C74.5583 14.5227 74.2098 14.4508 73.7779 14.3977C73.3537 14.3447 72.9749 14.3182 72.6416 14.3182C71.9825 14.3182 71.3878 14.4659 70.8575 14.7614C70.3348 15.0492 69.9219 15.4545 69.6189 15.9773C69.3234 16.4924 69.1757 17.0985 69.1757 17.7955V27.2727H63.6189Z" fill="#000"/>
  <path d="M77.7276 27.2727V4H87.4322C89.1746 4 90.6329 4.24621 91.8072 4.73864C92.989 5.23106 93.8753 5.92045 94.4662 6.80682C95.0647 7.69318 95.364 8.7197 95.364 9.88636C95.364 10.7727 95.1784 11.5644 94.8072 12.2614C94.4359 12.9508 93.9246 13.5227 93.2731 13.9773C92.6215 14.4318 91.8678 14.75 91.0117 14.9318V15.1591C91.9511 15.2045 92.8185 15.4583 93.614 15.9205C94.417 16.3826 95.0609 17.0265 95.5458 17.8523C96.0306 18.6705 96.2731 19.6402 96.2731 20.7614C96.2731 22.0114 95.9549 23.1288 95.3185 24.1136C94.6821 25.0909 93.7617 25.8636 92.5572 26.4318C91.3526 26.9924 89.8905 27.2727 88.1708 27.2727H77.7276ZM83.3526 22.7386H86.8299C88.0496 22.7386 88.9473 22.5076 89.5231 22.0455C90.1064 21.5833 90.3981 20.9394 90.3981 20.1136C90.3981 19.5152 90.2579 19 89.9776 18.5682C89.6973 18.1288 89.2996 17.7917 88.7844 17.5568C88.2693 17.3144 87.6518 17.1932 86.9322 17.1932H83.3526V22.7386ZM83.3526 13.5682H86.4662C87.0799 13.5682 87.6253 13.4659 88.1026 13.2614C88.5799 13.0568 88.9511 12.7614 89.2162 12.375C89.489 11.9886 89.6253 11.5227 89.6253 10.9773C89.6253 10.197 89.3488 9.58333 88.7958 9.13636C88.2428 8.68939 87.4965 8.46591 86.5572 8.46591H83.3526V13.5682Z" fill="#000"/>
  <path d="M99.6176 27.2727V9.81818H105.015V13H105.197C105.515 11.8485 106.034 10.9924 106.754 10.4318C107.474 9.86364 108.311 9.57955 109.265 9.57955C109.523 9.57955 109.788 9.59849 110.061 9.63636C110.334 9.66667 110.587 9.71591 110.822 9.78409V14.6136C110.557 14.5227 110.209 14.4508 109.777 14.3977C109.352 14.3447 108.974 14.3182 108.64 14.3182C107.981 14.3182 107.387 14.4659 106.856 14.7614C106.334 15.0492 105.921 15.4545 105.618 15.9773C105.322 16.4924 105.174 17.0985 105.174 17.7955V27.2727H99.6176Z" fill="#000"/>
  <path d="M117.991 27.5682C116.877 27.5682 115.888 27.3826 115.025 27.0114C114.169 26.6326 113.491 26.0644 112.991 25.3068C112.498 24.5417 112.252 23.5833 112.252 22.4318C112.252 21.4621 112.422 20.6439 112.763 19.9773C113.104 19.3106 113.574 18.7689 114.172 18.3523C114.771 17.9356 115.46 17.6212 116.241 17.4091C117.021 17.1894 117.854 17.0417 118.741 16.9659C119.733 16.875 120.532 16.7803 121.138 16.6818C121.744 16.5758 122.184 16.428 122.456 16.2386C122.737 16.0417 122.877 15.7652 122.877 15.4091V15.3523C122.877 14.7689 122.676 14.3182 122.275 14C121.873 13.6818 121.331 13.5227 120.65 13.5227C119.915 13.5227 119.324 13.6818 118.877 14C118.43 14.3182 118.146 14.7576 118.025 15.3182L112.9 15.1364C113.051 14.0758 113.441 13.1288 114.07 12.2955C114.706 11.4545 115.578 10.7955 116.684 10.3182C117.797 9.83333 119.134 9.59091 120.695 9.59091C121.809 9.59091 122.835 9.72349 123.775 9.98864C124.714 10.2462 125.532 10.625 126.229 11.125C126.926 11.6174 127.464 12.2235 127.843 12.9432C128.229 13.6629 128.422 14.4848 128.422 15.4091V27.2727H123.195V24.8409H123.059C122.748 25.4318 122.35 25.9318 121.866 26.3409C121.388 26.75 120.824 27.0568 120.172 27.2614C119.528 27.4659 118.801 27.5682 117.991 27.5682ZM119.706 23.9318C120.305 23.9318 120.843 23.8106 121.32 23.5682C121.805 23.3258 122.191 22.9924 122.479 22.5682C122.767 22.1364 122.911 21.6364 122.911 21.0682V19.4091C122.752 19.4924 122.559 19.5682 122.331 19.6364C122.112 19.7045 121.869 19.7689 121.604 19.8295C121.339 19.8902 121.066 19.9432 120.786 19.9886C120.506 20.0341 120.237 20.0758 119.979 20.1136C119.456 20.197 119.009 20.3258 118.638 20.5C118.275 20.6742 117.994 20.9015 117.797 21.1818C117.608 21.4545 117.513 21.7803 117.513 22.1591C117.513 22.7348 117.718 23.1742 118.127 23.4773C118.544 23.7803 119.07 23.9318 119.706 23.9318Z" fill="#000"/>
  <path d="M138.017 17.3182V27.2727H132.46V9.81818H137.744V13.0227H137.937C138.324 11.9545 138.983 11.1174 139.915 10.5114C140.846 9.89773 141.956 9.59091 143.244 9.59091C144.471 9.59091 145.536 9.86742 146.437 10.4205C147.346 10.9659 148.051 11.7311 148.551 12.7159C149.059 13.6932 149.309 14.8371 149.301 16.1477V27.2727H143.744V17.2386C143.752 16.2689 143.506 15.5114 143.006 14.9659C142.513 14.4205 141.828 14.1477 140.949 14.1477C140.365 14.1477 139.85 14.2765 139.403 14.5341C138.964 14.7841 138.623 15.1439 138.381 15.6136C138.146 16.0833 138.024 16.6515 138.017 17.3182Z" fill="#000"/>
  <path d="M159.756 27.5227C158.468 27.5227 157.298 27.1894 156.245 26.5227C155.192 25.8561 154.351 24.8561 153.722 23.5227C153.093 22.1894 152.779 20.5341 152.779 18.5568C152.779 16.5038 153.105 14.8144 153.756 13.4886C154.408 12.1629 155.26 11.1818 156.313 10.5455C157.374 9.90909 158.514 9.59091 159.734 9.59091C160.65 9.59091 161.434 9.75 162.086 10.0682C162.737 10.3788 163.275 10.7803 163.7 11.2727C164.124 11.7652 164.446 12.2765 164.665 12.8068H164.779V4H170.336V27.2727H164.836V24.4432H164.665C164.431 24.9811 164.097 25.4848 163.665 25.9545C163.234 26.4242 162.692 26.803 162.04 27.0909C161.396 27.3788 160.635 27.5227 159.756 27.5227ZM161.688 23.1932C162.362 23.1932 162.938 23.0038 163.415 22.625C163.893 22.2386 164.26 21.697 164.518 21C164.775 20.303 164.904 19.4848 164.904 18.5455C164.904 17.5909 164.775 16.7689 164.518 16.0795C164.268 15.3902 163.9 14.8598 163.415 14.4886C162.938 14.1174 162.362 13.9318 161.688 13.9318C160.999 13.9318 160.415 14.1212 159.938 14.5C159.461 14.8788 159.097 15.4129 158.847 16.1023C158.605 16.7917 158.484 17.6061 158.484 18.5455C158.484 19.4848 158.609 20.303 158.859 21C159.109 21.697 159.468 22.2386 159.938 22.625C160.415 23.0038 160.999 23.1932 161.688 23.1932Z" fill="#000"/>
  <path d="M115.233 44.2727V34.0909H116.406V37.8494H116.506C116.592 37.7168 116.711 37.5478 116.864 37.3423C117.019 37.1335 117.241 36.9479 117.53 36.7855C117.822 36.6197 118.216 36.5369 118.713 36.5369C119.356 36.5369 119.923 36.6976 120.413 37.0191C120.904 37.3406 121.287 37.7964 121.562 38.3863C121.837 38.9763 121.974 39.6723 121.974 40.4744C121.974 41.2831 121.837 41.9841 121.562 42.5774C121.287 43.1673 120.906 43.6247 120.418 43.9495C119.931 44.271 119.369 44.4318 118.733 44.4318C118.242 44.4318 117.85 44.3506 117.555 44.1882C117.26 44.0224 117.033 43.8352 116.874 43.6264C116.715 43.4143 116.592 43.2386 116.506 43.0994H116.366V44.2727H115.233ZM116.386 40.4545C116.386 41.0312 116.471 41.54 116.64 41.9808C116.809 42.4183 117.056 42.7613 117.381 43.0099C117.706 43.2552 118.103 43.3778 118.574 43.3778C119.064 43.3778 119.474 43.2485 119.802 42.99C120.133 42.7282 120.382 42.3768 120.548 41.936C120.717 41.4919 120.801 40.9981 120.801 40.4545C120.801 39.9176 120.718 39.4337 120.553 39.0028C120.39 38.5686 120.143 38.2256 119.812 37.9737C119.484 37.7185 119.071 37.5909 118.574 37.5909C118.097 37.5909 117.696 37.7118 117.371 37.9538C117.046 38.1924 116.801 38.5272 116.635 38.9581C116.469 39.3856 116.386 39.8844 116.386 40.4545Z" fill="#000"/>
  <path d="M124.531 47.1363C124.333 47.1363 124.155 47.1197 123.999 47.0866C123.844 47.0568 123.736 47.0269 123.676 46.9971L123.975 45.963C124.26 46.0359 124.512 46.0625 124.73 46.0426C124.949 46.0227 125.143 45.9249 125.312 45.7492C125.484 45.5769 125.642 45.2968 125.784 44.909L126.003 44.3125L123.179 36.6363H124.452L126.56 42.7215H126.639L128.747 36.6363H130.02L126.779 45.3863C126.633 45.7807 126.452 46.1072 126.237 46.3657C126.021 46.6276 125.771 46.8215 125.486 46.9474C125.204 47.0733 124.886 47.1363 124.531 47.1363Z" fill="#000"/>
  <path d="M141.793 36.6363C141.734 36.1325 141.492 35.7414 141.068 35.463C140.643 35.1846 140.123 35.0454 139.507 35.0454C139.056 35.0454 138.661 35.1183 138.323 35.2642C137.989 35.41 137.727 35.6105 137.538 35.8657C137.352 36.1209 137.259 36.4109 137.259 36.7358C137.259 37.0075 137.324 37.2412 137.453 37.4367C137.586 37.629 137.755 37.7897 137.96 37.919C138.166 38.0449 138.381 38.1493 138.607 38.2322C138.832 38.3117 139.039 38.3764 139.228 38.4261L140.262 38.7045C140.527 38.7741 140.822 38.8702 141.147 38.9929C141.475 39.1155 141.789 39.2829 142.087 39.495C142.388 39.7038 142.637 39.9723 142.833 40.3004C143.028 40.6285 143.126 41.0312 143.126 41.5085C143.126 42.0587 142.982 42.5558 142.693 43C142.408 43.4441 141.991 43.7971 141.441 44.0589C140.894 44.3207 140.229 44.4517 139.447 44.4517C138.718 44.4517 138.086 44.334 137.553 44.0987C137.022 43.8634 136.605 43.5352 136.3 43.1143C135.998 42.6934 135.828 42.2045 135.788 41.6477H137.061C137.094 42.0322 137.223 42.3503 137.448 42.6022C137.677 42.8508 137.965 43.0364 138.313 43.159C138.665 43.2784 139.043 43.338 139.447 43.338C139.918 43.338 140.34 43.2618 140.715 43.1093C141.089 42.9536 141.386 42.7381 141.605 42.463C141.823 42.1846 141.933 41.8598 141.933 41.4886C141.933 41.1505 141.838 40.8754 141.649 40.6633C141.46 40.4512 141.212 40.2788 140.904 40.1463C140.595 40.0137 140.262 39.8977 139.904 39.7983L138.651 39.4403C137.856 39.2116 137.226 38.8851 136.762 38.4609C136.298 38.0367 136.066 37.4815 136.066 36.7954C136.066 36.2253 136.22 35.7282 136.529 35.3039C136.84 34.8764 137.258 34.5449 137.781 34.3096C138.308 34.071 138.897 33.9517 139.546 33.9517C140.203 33.9517 140.786 34.0693 141.296 34.3046C141.807 34.5367 142.211 34.8548 142.509 35.2592C142.811 35.6635 142.97 36.1226 142.987 36.6363H141.793Z" fill="#000"/>
  <path d="M147.004 44.2727L144.677 36.6363H145.91L147.561 42.4829H147.64L149.271 36.6363H150.524L152.135 42.463H152.214L153.865 36.6363H155.098L152.771 44.2727H151.618L149.947 38.4062H149.828L148.157 44.2727H147.004Z" fill="#000"/>
  <path d="M159.176 44.4517C158.692 44.4517 158.253 44.3605 157.859 44.1782C157.464 43.9926 157.151 43.7258 156.919 43.3778C156.687 43.0265 156.571 42.6022 156.571 42.1051C156.571 41.6676 156.657 41.3129 156.83 41.0411C157.002 40.7661 157.232 40.5506 157.521 40.3948C157.809 40.2391 158.127 40.1231 158.475 40.0468C158.826 39.9673 159.179 39.9043 159.534 39.8579C159.998 39.7983 160.374 39.7535 160.663 39.7237C160.954 39.6905 161.166 39.6358 161.299 39.5596C161.435 39.4834 161.503 39.3508 161.503 39.1619V39.1221C161.503 38.6316 161.369 38.2504 161.1 37.9786C160.835 37.7069 160.432 37.571 159.892 37.571C159.332 37.571 158.893 37.6936 158.575 37.9389C158.256 38.1841 158.033 38.446 157.903 38.7244L156.79 38.3267C156.989 37.8626 157.254 37.5014 157.585 37.2429C157.92 36.981 158.285 36.7987 158.679 36.696C159.077 36.5899 159.468 36.5369 159.852 36.5369C160.098 36.5369 160.379 36.5667 160.697 36.6264C161.019 36.6827 161.329 36.8004 161.627 36.9794C161.929 37.1583 162.179 37.4285 162.378 37.7897C162.577 38.151 162.676 38.6349 162.676 39.2414V44.2727H161.503V43.2386H161.443C161.364 43.4043 161.231 43.5816 161.045 43.7706C160.86 43.9595 160.613 44.1202 160.305 44.2528C159.996 44.3854 159.62 44.4517 159.176 44.4517ZM159.355 43.3977C159.819 43.3977 160.21 43.3065 160.528 43.1242C160.85 42.942 161.092 42.7066 161.254 42.4183C161.42 42.1299 161.503 41.8267 161.503 41.5085V40.4346C161.453 40.4943 161.344 40.549 161.175 40.5987C161.009 40.6451 160.817 40.6865 160.598 40.723C160.383 40.7561 160.172 40.7859 159.967 40.8125C159.764 40.8357 159.6 40.8555 159.474 40.8721C159.169 40.9119 158.884 40.9765 158.619 41.066C158.357 41.1522 158.145 41.2831 157.983 41.4588C157.824 41.6311 157.744 41.8664 157.744 42.1647C157.744 42.5724 157.895 42.8806 158.197 43.0894C158.502 43.2949 158.888 43.3977 159.355 43.3977Z" fill="#000"/>
  <path d="M166.271 39.6789V44.2727H165.098V36.6363H166.231V37.8295H166.331C166.51 37.4417 166.781 37.1302 167.146 36.8948C167.511 36.6562 167.981 36.5369 168.558 36.5369C169.075 36.5369 169.527 36.6429 169.915 36.8551C170.303 37.0639 170.604 37.3821 170.82 37.8096C171.035 38.2339 171.143 38.7708 171.143 39.4204V44.2727H169.97V39.5C169.97 38.9001 169.814 38.4327 169.502 38.098C169.191 37.7599 168.763 37.5909 168.22 37.5909C167.845 37.5909 167.511 37.6721 167.216 37.8345C166.924 37.9969 166.694 38.2339 166.524 38.5454C166.355 38.857 166.271 39.2348 166.271 39.6789Z" fill="#000"/>
  </svg>`;

  // parse svg
  const parser = new DOMParser();
  const svg = parser.parseFromString(svgString, "image/svg+xml").documentElement;

  // @ts-expect-error
  return svg;
};

export const createSvgImage = (svg: SVGElement): HTMLImageElement => {
  const svgSize = getSvgSize(svg);
  const base64Uri = convertSvgToBase64Uri(svg);
  const { width, height } = getImageSize(svgSize);
  const image = new Image(width, height);
  image.src = base64Uri;

  return image;
};
